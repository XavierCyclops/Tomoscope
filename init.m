function [methodinfo,structs,enuminfo,ThunkLibName]=init
%INIT Create structures to define interfaces found in 'tiepie'.

%This function was generated by loadlibrary.m parser version  on Thu Dec 15 12:23:38 2016
%perl options:'tiepie.i -outfile=init.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% extern  word __stdcall InitInstrument ( word wAddress ); 
fcns.name{fcnNum}='InitInstrument'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
% extern  word __stdcall ExitInstrument ( void ); 
fcns.name{fcnNum}='ExitInstrument'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  word __stdcall GetCalibrationDate ( dword * dwDate ); 
fcns.name{fcnNum}='GetCalibrationDate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall GetSerialNumber ( dword * dwSerialNumber ); 
fcns.name{fcnNum}='GetSerialNumber'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall GetAvailableSensitivities ( double * dSensitivities ); 
fcns.name{fcnNum}='GetAvailableSensitivities'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
% extern  word __stdcall GetAvailableResolutions ( double * dResolutions ); 
fcns.name{fcnNum}='GetAvailableResolutions'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
% extern  word __stdcall GetNrChannels ( word * wValue ); 
fcns.name{fcnNum}='GetNrChannels'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% extern  double __stdcall GetMaxSampleFrequencyF ( void ); 
fcns.name{fcnNum}='GetMaxSampleFrequencyF'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  dword __stdcall GetMaxRecordLength ( void ); 
fcns.name{fcnNum}='GetMaxRecordLength'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  dword __stdcall GetDCLevelStatus ( void ); 
fcns.name{fcnNum}='GetDCLevelStatus'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  word __stdcall ADC_Start ( void ); 
fcns.name{fcnNum}='ADC_Start'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  word __stdcall ADC_Running ( void ); 
fcns.name{fcnNum}='ADC_Running'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  word __stdcall ADC_Abort ( void ); 
fcns.name{fcnNum}='ADC_Abort'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  word __stdcall ADC_ForceTrig ( void ); 
fcns.name{fcnNum}='ADC_ForceTrig'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  word __stdcall ADC_Triggered ( void ); 
fcns.name{fcnNum}='ADC_Triggered'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  word __stdcall ADC_Ready ( void ); 
fcns.name{fcnNum}='ADC_Ready'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  word __stdcall ADC_GetDataCh ( word wCh , word * wChData ); 
fcns.name{fcnNum}='ADC_GetDataCh'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16', 'uint16Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall ADC_GetDataVoltCh ( word wCh , double * dChData ); 
fcns.name{fcnNum}='ADC_GetDataVoltCh'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16', 'doublePtr'};fcnNum=fcnNum+1;
% extern  word __stdcall GetDigitalInputValues ( word * wValues ); 
fcns.name{fcnNum}='GetDigitalInputValues'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall GetOneDigitalValue ( dword dwIndex , word * wValue ); 
fcns.name{fcnNum}='GetOneDigitalValue'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetDataReadyCallback ( TDataReady pAddress ); 
fcns.name{fcnNum}='SetDataReadyCallback'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetDataReadyEvent ( HANDLE hEvent ); 
fcns.name{fcnNum}='SetDataReadyEvent'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetTransferMode ( dword dwMode ); 
fcns.name{fcnNum}='SetTransferMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% extern  word __stdcall GetTransferMode ( dword * dwMode ); 
fcns.name{fcnNum}='GetTransferMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetResolution ( byte byValue ); 
fcns.name{fcnNum}='SetResolution'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
% extern  word __stdcall GetResolution ( byte * byValue ); 
fcns.name{fcnNum}='GetResolution'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetInstrumentConfig ( word wMode ); 
fcns.name{fcnNum}='SetInstrumentConfig'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
% extern  word __stdcall GetInstrumentConfig ( word * wMode ); 
fcns.name{fcnNum}='GetInstrumentConfig'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall GetMeasureMode ( byte * byMode ); 
fcns.name{fcnNum}='GetMeasureMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetMeasureMode ( byte byMode ); 
fcns.name{fcnNum}='SetMeasureMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
% extern  dword __stdcall GetRecordLength ( void ); 
fcns.name{fcnNum}='GetRecordLength'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  word __stdcall SetRecordLength ( dword dwRecordLength ); 
fcns.name{fcnNum}='SetRecordLength'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% extern  dword __stdcall GetPostSamples ( void ); 
fcns.name{fcnNum}='GetPostSamples'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  word __stdcall SetPostSamples ( dword dwPostSampleCount ); 
fcns.name{fcnNum}='SetPostSamples'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% extern  double __stdcall GetSampleFrequencyF ( void ); 
fcns.name{fcnNum}='GetSampleFrequencyF'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  word __stdcall SetSampleFrequencyF ( double * dFreq ); 
fcns.name{fcnNum}='SetSampleFrequencyF'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
% extern  word __stdcall GetExternalClock ( word * wMode ); 
fcns.name{fcnNum}='GetExternalClock'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetExternalClock ( word wMode ); 
fcns.name{fcnNum}='SetExternalClock'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
% extern  word __stdcall GetSensitivity ( byte byCh , double * dSensitivity ); 
fcns.name{fcnNum}='GetSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8', 'doublePtr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetSensitivity ( byte byCh , double * dSensitivity ); 
fcns.name{fcnNum}='SetSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8', 'doublePtr'};fcnNum=fcnNum+1;
% extern  word __stdcall GetAutoRanging ( byte byCh , byte * byMode ); 
fcns.name{fcnNum}='GetAutoRanging'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetAutoRanging ( byte byCh , byte byMode ); 
fcns.name{fcnNum}='SetAutoRanging'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8', 'uint8'};fcnNum=fcnNum+1;
% extern  word __stdcall GetCoupling ( byte byCh , byte * byMode ); 
fcns.name{fcnNum}='GetCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetCoupling ( byte byCh , byte byMode ); 
fcns.name{fcnNum}='SetCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8', 'uint8'};fcnNum=fcnNum+1;
% extern  word __stdcall GetDcLevel ( byte byCh , double * dDcLevel ); 
fcns.name{fcnNum}='GetDcLevel'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8', 'doublePtr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetDcLevel ( byte byCh , double dDcLevel ); 
fcns.name{fcnNum}='SetDcLevel'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8', 'double'};fcnNum=fcnNum+1;
% extern  word __stdcall GetTriggerSource ( byte * byTrigSource ); 
fcns.name{fcnNum}='GetTriggerSource'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetTriggerSource ( byte byTrigSource ); 
fcns.name{fcnNum}='SetTriggerSource'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
% extern  word __stdcall GetTriggerMode ( byte * byMode ); 
fcns.name{fcnNum}='GetTriggerMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetTriggerMode ( byte byMode ); 
fcns.name{fcnNum}='SetTriggerMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
% extern  word __stdcall GetTriggerModeCh ( byte byCh , byte * byMode ); 
fcns.name{fcnNum}='GetTriggerModeCh'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetTriggerModeCh ( byte byCh , byte byMode ); 
fcns.name{fcnNum}='SetTriggerModeCh'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8', 'uint8'};fcnNum=fcnNum+1;
% extern  word __stdcall GetTriggerLevel ( byte byCh , double * dLevel ); 
fcns.name{fcnNum}='GetTriggerLevel'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8', 'doublePtr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetTriggerLevel ( byte byCh , double dLevel ); 
fcns.name{fcnNum}='SetTriggerLevel'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8', 'double'};fcnNum=fcnNum+1;
% extern  word __stdcall GetTriggerHys ( byte byCh , double * dHysteresis ); 
fcns.name{fcnNum}='GetTriggerHys'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8', 'doublePtr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetTriggerHys ( byte byCh , double dHysteresis ); 
fcns.name{fcnNum}='SetTriggerHys'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8', 'double'};fcnNum=fcnNum+1;
% extern  word __stdcall GetPXITriggerEnables ( byte * byEnables ); 
fcns.name{fcnNum}='GetPXITriggerEnables'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetPXITriggerEnables ( byte byEnables ); 
fcns.name{fcnNum}='SetPXITriggerEnables'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
% extern  word __stdcall GetPXITriggerSlopes ( byte * bySlopes ); 
fcns.name{fcnNum}='GetPXITriggerSlopes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetPXITriggerSlopes ( byte bySlopes ); 
fcns.name{fcnNum}='SetPXITriggerSlopes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
% extern  word __stdcall SetDigitalOutputs ( byte byValue ); 
fcns.name{fcnNum}='SetDigitalOutputs'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
% extern  word __stdcall GetDigitalOutputs ( byte * byValue ); 
fcns.name{fcnNum}='GetDigitalOutputs'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall GetSquareWaveGenStatus ( void ); 
fcns.name{fcnNum}='GetSquareWaveGenStatus'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  dword __stdcall GetSquareWaveGenFrequency ( void ); 
fcns.name{fcnNum}='GetSquareWaveGenFrequency'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  word __stdcall SetSquareWaveGenFrequency ( dword * dwFreq ); 
fcns.name{fcnNum}='SetSquareWaveGenFrequency'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall GetFunctionGenStatus ( void ); 
fcns.name{fcnNum}='GetFunctionGenStatus'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  word __stdcall GetFuncGenMaxAmplitude ( double * dMaxAmplitude ); 
fcns.name{fcnNum}='GetFuncGenMaxAmplitude'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
% extern  word __stdcall GetFuncGenOutputOn ( word * wValue ); 
fcns.name{fcnNum}='GetFuncGenOutputOn'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetFuncGenOutputOn ( word wValue ); 
fcns.name{fcnNum}='SetFuncGenOutputOn'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
% extern  word __stdcall GetFuncGenEnable ( word * wValue ); 
fcns.name{fcnNum}='GetFuncGenEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetFuncGenEnable ( word wValue ); 
fcns.name{fcnNum}='SetFuncGenEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
% extern  word __stdcall GetFuncGenSignalType ( word * wValue ); 
fcns.name{fcnNum}='GetFuncGenSignalType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetFuncGenSignalType ( word wValue ); 
fcns.name{fcnNum}='SetFuncGenSignalType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
% extern  word __stdcall SetFuncGenMode ( dword dwMode ); 
fcns.name{fcnNum}='SetFuncGenMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% extern  word __stdcall GetFuncGenMode ( dword * dwMode ); 
fcns.name{fcnNum}='GetFuncGenMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall GetFuncGenAmplitude ( double * dValue ); 
fcns.name{fcnNum}='GetFuncGenAmplitude'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetFuncGenAmplitude ( double dValue ); 
fcns.name{fcnNum}='SetFuncGenAmplitude'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
% extern  word __stdcall GetFuncGenAmplitudeRange ( byte * byValue ); 
fcns.name{fcnNum}='GetFuncGenAmplitudeRange'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetFuncGenAmplitudeRange ( byte byValue ); 
fcns.name{fcnNum}='SetFuncGenAmplitudeRange'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
% extern  word __stdcall GetFuncGenDCOffset ( double * dValue ); 
fcns.name{fcnNum}='GetFuncGenDCOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetFuncGenDCOffset ( double dValue ); 
fcns.name{fcnNum}='SetFuncGenDCOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
% extern  word __stdcall GetFuncGenSymmetry ( double * dValue ); 
fcns.name{fcnNum}='GetFuncGenSymmetry'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetFuncGenSymmetry ( double dValue ); 
fcns.name{fcnNum}='SetFuncGenSymmetry'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'double'};fcnNum=fcnNum+1;
% extern  word __stdcall GetFuncGenFrequency ( double * dValue ); 
fcns.name{fcnNum}='GetFuncGenFrequency'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetFuncGenFrequency ( double * dValue ); 
fcns.name{fcnNum}='SetFuncGenFrequency'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'doublePtr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetFuncGenTrigSource ( byte byTrigSource ); 
fcns.name{fcnNum}='SetFuncGenTrigSource'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
% extern  word __stdcall GetFuncGenTrigSource ( byte * byTrigSource ); 
fcns.name{fcnNum}='GetFuncGenTrigSource'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall FillFuncGenMemory ( dword dwSampleCount , word * FuncGenData ); 
fcns.name{fcnNum}='FillFuncGenMemory'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall FuncGenBurst ( word wNrPeriods ); 
fcns.name{fcnNum}='FuncGenBurst'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
% extern  word __stdcall SetupOhmMeasurements ( word wMode ); 
fcns.name{fcnNum}='SetupOhmMeasurements'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16'};fcnNum=fcnNum+1;
% extern  word __stdcall GetOhmValues ( double * dValue1 , double * dValue2 ); 
fcns.name{fcnNum}='GetOhmValues'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern  word __stdcall I2CWrite ( dword dwAddress , pointer pBuf , dword dwSize ); 
fcns.name{fcnNum}='I2CWrite'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% extern  word __stdcall I2CWriteNoStop ( dword dwAddress , pointer pBuf , dword dwSize ); 
fcns.name{fcnNum}='I2CWriteNoStop'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% extern  word __stdcall I2CRead ( dword dwAddress , pointer pBuf , dword dwSize ); 
fcns.name{fcnNum}='I2CRead'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% extern  word __stdcall I2CReadNoStop ( dword dwAddress , pointer pBuf , dword dwSize ); 
fcns.name{fcnNum}='I2CReadNoStop'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32', 'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% extern  word __stdcall I2CGetSpeed ( dword * dwSpeed ); 
fcns.name{fcnNum}='I2CGetSpeed'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall I2CSetSpeed ( dword * dwSpeed ); 
fcns.name{fcnNum}='I2CSetSpeed'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall GetActiveHS2 ( byte * byActiveHS2 ); 
fcns.name{fcnNum}='GetActiveHS2'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall SetActiveHS2 ( byte byActiveHS2 ); 
fcns.name{fcnNum}='SetActiveHS2'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8'};fcnNum=fcnNum+1;
% extern  word __stdcall SetDAC1451 ( double dMotor1 , double dMotor2 ); 
fcns.name{fcnNum}='SetDAC1451'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'double', 'double'};fcnNum=fcnNum+1;
% extern  word __stdcall SetMotorOn ( byte byMotor1 , byte byMotor2 ); 
fcns.name{fcnNum}='SetMotorOn'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint8', 'uint8'};fcnNum=fcnNum+1;
% extern  dword __stdcall GetMaxSampleFrequency ( void ); 
fcns.name{fcnNum}='GetMaxSampleFrequency'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  word __stdcall StartMeasurement ( void ); 
fcns.name{fcnNum}='StartMeasurement'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  word __stdcall GetMeasurement ( double * dCh1 , double * dCh2 ); 
fcns.name{fcnNum}='GetMeasurement'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern  word __stdcall GetMeasurementRaw ( word * wCh1 , word * wCh2 ); 
fcns.name{fcnNum}='GetMeasurementRaw'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall GetOneMeasurement ( dword dwIndex , double * dCh1 , double * dCh2 ); 
fcns.name{fcnNum}='GetOneMeasurement'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern  word __stdcall GetOneMeasurementRaw ( dword dwIndex , word * wCh1 , word * wCh2 ); 
fcns.name{fcnNum}='GetOneMeasurementRaw'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32', 'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall GetOneMeasurementRawCh ( word wCh , dword dwIndex , word * wChData ); 
fcns.name{fcnNum}='GetOneMeasurementRawCh'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16', 'uint32', 'uint16Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall ADC_GetData ( word * wCh1 , word * wCh2 ); 
fcns.name{fcnNum}='ADC_GetData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint16Ptr', 'uint16Ptr'};fcnNum=fcnNum+1;
% extern  word __stdcall ADC_GetDataVolt ( double * dCh1 , double * dCh2 ); 
fcns.name{fcnNum}='ADC_GetDataVolt'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern  dword __stdcall GetSampleFrequency ( void ); 
fcns.name{fcnNum}='GetSampleFrequency'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  word __stdcall SetSampleFrequency ( dword * dwFreq ); 
fcns.name{fcnNum}='SetSampleFrequency'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32Ptr'};fcnNum=fcnNum+1;
% extern  dword __stdcall GetTriggerTimeOut ( void ); 
fcns.name{fcnNum}='GetTriggerTimeOut'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% extern  word __stdcall SetTriggerTimeOut ( dword dwTimeout ); 
fcns.name{fcnNum}='SetTriggerTimeOut'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
enuminfo.TDeviceTypes=struct('dtHandyprobe2',0,'dtHandyscope2',1,'dtHandyscope3',2,'dtHandyscope4',3,'dtHS508',4,'dtHS801',5,'dtTP112',6,'dtTP208',7,'dtTP508',8,'dtTP801',9,'dtPCI801',10,'dtMultiCh',11);
methodinfo=fcns;